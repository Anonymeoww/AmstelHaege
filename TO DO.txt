- Datastructuur schrijven
- Class AmstelHaege
- Heeft een list met dictionaries met id + de coordinaten van alle huizen (van linksonder)
- Heeft een list met de coordinaten van alle lichamen water
- Heeft een methode om de totale vrijstand te berekenen
- Heeft een methode om de totale waarde te berekenen en te returnen
  - Class Huis
    - Inladen in Amstelhaege met textfile
      - Heeft een methode om extra vrijstand van zichzelf te berekenen
      - Heeft een methode om zijn waarde aan te passen adhv extra vrijstand
  - Class Water
    - Oppervlakte
    - Afmetingen

Startpunt:
- grid met nullen en enen. Iedere nul heeft de afmetingen van een maison.
  Op die manier kun je uitrekenen wat de co√∂rdinaten zijn op de plekken waar je iets hebt neergezet.
  Dan hoef je niet meer ervoor te zorgen dat er alleen een 1 wordt geplaatst wanneer daaromheen allemaal nullen zijn
- Extra vrijstand berekenen:
    - Eerst als rechthoek eromheen, later met ronde hoeken.
    - Extra vrijstand berekenen door te bepalen welk huis het dichtst bij is.

Algoritme:
- Een neighbouring solution is het verplaatsen van een random huis
- Hiervoor moet er een lijst zijn met coordinaten van geplaatste huizen en een lijst met coordinaten van mogelijke zetten


Optimaliseren:
Simulated Annealing toepassen door huisjes te swappen en de waarde te vergelijken.

Visualiseren:
- Matplotlib
  - grid met geplaatste huizen
  - grafiek met aantal iteraties vs totale waarde
  - grafiek met aantal iteraties vs totale extra vrijstand

Algemeen:
- Water is onderdeel van de vrijstand
- readme opstellen
- requirements.txt opstellen

Presentatie:
- Introductie
  - Er moet een tabel worden ingevoegd met de data van de verschillende type huizen
- Methode
  - Pseudocode ipv echte code
- Resultaten
- Conclusie
